{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\n\nfunction useForms(initial = {}) {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n  const initialValues = Object.values(initial).join(\"\");\n  useEffect(() => {\n    setInputs(inputs);\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let {\n      name,\n      value,\n      type\n    } = e.target;\n\n    if (type === \"number\") {\n      value = parseInt(value);\n    }\n\n    if (type === \"file\") {\n      value = e.target.files[0];\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, \"\"]));\n    setInputs(blankState);\n  }\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}\n\nexport default useForms;","map":{"version":3,"sources":["/Users/sid/Js/dream/store-gql/Advanced-React-master/sick-fits/frontend/lib/useForms.js"],"names":["useEffect","useState","useForms","initial","inputs","setInputs","initialValues","Object","values","join","handleChange","e","name","value","type","target","parseInt","files","resetForm","clearForm","blankState","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,QAAT,CAAkBC,OAAO,GAAG,EAA5B,EAAgC;AAC9B,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;AACA,QAAMG,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,EAA5B,CAAtB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,SAAS,CAACD,MAAD,CAAT;AACD,GAFQ,EAEN,CAACE,aAAD,CAFM,CAAT;;AAGA,WAASI,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrBD,MAAAA,KAAK,GAAGG,QAAQ,CAACH,KAAD,CAAhB;AACD;;AACD,QAAIC,IAAI,KAAK,MAAb,EAAqB;AACnBD,MAAAA,KAAK,GAAGF,CAAC,CAACI,MAAF,CAASE,KAAT,CAAe,CAAf,CAAR;AACD;;AACDZ,IAAAA,SAAS,iCAAMD,MAAN;AAAc,OAACQ,IAAD,GAAQC;AAAtB,OAAT;AACD;;AACD,WAASK,SAAT,GAAqB;AACnBb,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD;;AACD,WAASgB,SAAT,GAAqB;AACnB,UAAMC,UAAU,GAAGb,MAAM,CAACc,WAAP,CACjBd,MAAM,CAACe,OAAP,CAAelB,MAAf,EAAuBmB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMX,KAAN,CAAD,KAAkB,CAACW,GAAD,EAAM,EAAN,CAA7C,CADiB,CAAnB;AAGAnB,IAAAA,SAAS,CAACe,UAAD,CAAT;AACD;;AAED,SAAO;AAAEhB,IAAAA,MAAF;AAAUM,IAAAA,YAAV;AAAwBQ,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,GAAP;AACD;;AAED,eAAejB,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction useForms(initial = {}) {\n  const [inputs, setInputs] = useState(initial);\n  const initialValues = Object.values(initial).join(\"\");\n\n  useEffect(() => {\n    setInputs(inputs);\n  }, [initialValues]);\n  function handleChange(e) {\n    let { name, value, type } = e.target;\n    if (type === \"number\") {\n      value = parseInt(value);\n    }\n    if (type === \"file\") {\n      value = e.target.files[0];\n    }\n    setInputs({ ...inputs, [name]: value });\n  }\n  function resetForm() {\n    setInputs(initial);\n  }\n  function clearForm() {\n    const blankState = Object.fromEntries(\n      Object.entries(inputs).map(([key, value]) => [key, \"\"])\n    );\n    setInputs(blankState);\n  }\n\n  return { inputs, handleChange, resetForm, clearForm };\n}\n\nexport default useForms;\n"]},"metadata":{},"sourceType":"module"}